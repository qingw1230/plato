// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gateway.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GatewayRequest struct {
	ConnID               uint64   `protobuf:"varint,1,opt,name=connID,proto3" json:"connID,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayRequest) Reset()         { *m = GatewayRequest{} }
func (m *GatewayRequest) String() string { return proto.CompactTextString(m) }
func (*GatewayRequest) ProtoMessage()    {}
func (*GatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a937782ebbded5, []int{0}
}

func (m *GatewayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayRequest.Unmarshal(m, b)
}
func (m *GatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayRequest.Marshal(b, m, deterministic)
}
func (m *GatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayRequest.Merge(m, src)
}
func (m *GatewayRequest) XXX_Size() int {
	return xxx_messageInfo_GatewayRequest.Size(m)
}
func (m *GatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayRequest proto.InternalMessageInfo

func (m *GatewayRequest) GetConnID() uint64 {
	if m != nil {
		return m.ConnID
	}
	return 0
}

func (m *GatewayRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type GatewayResponse struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayResponse) Reset()         { *m = GatewayResponse{} }
func (m *GatewayResponse) String() string { return proto.CompactTextString(m) }
func (*GatewayResponse) ProtoMessage()    {}
func (*GatewayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a937782ebbded5, []int{1}
}

func (m *GatewayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayResponse.Unmarshal(m, b)
}
func (m *GatewayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayResponse.Marshal(b, m, deterministic)
}
func (m *GatewayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayResponse.Merge(m, src)
}
func (m *GatewayResponse) XXX_Size() int {
	return xxx_messageInfo_GatewayResponse.Size(m)
}
func (m *GatewayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayResponse proto.InternalMessageInfo

func (m *GatewayResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GatewayResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*GatewayRequest)(nil), "service.GatewayRequest")
	proto.RegisterType((*GatewayResponse)(nil), "service.GatewayResponse")
}

func init() { proto.RegisterFile("gateway.proto", fileDescriptor_f1a937782ebbded5) }

var fileDescriptor_f1a937782ebbded5 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4f, 0x2c, 0x49,
	0x2d, 0x4f, 0xac, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb,
	0x4c, 0x4e, 0x55, 0xb2, 0xe1, 0xe2, 0x73, 0x87, 0xc8, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97,
	0x08, 0x89, 0x71, 0xb1, 0x25, 0xe7, 0xe7, 0xe5, 0x79, 0xba, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0,
	0x04, 0x41, 0x79, 0x42, 0x42, 0x5c, 0x2c, 0x29, 0x89, 0x25, 0x89, 0x12, 0x4c, 0x0a, 0x8c, 0x1a,
	0x3c, 0x41, 0x60, 0xb6, 0x92, 0x39, 0x17, 0x3f, 0x5c, 0x77, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0x2a,
	0x48, 0x59, 0x72, 0x7e, 0x4a, 0x2a, 0x58, 0x33, 0x6b, 0x10, 0x98, 0x2d, 0x24, 0xc0, 0xc5, 0x9c,
	0x5b, 0x9c, 0x0e, 0xd6, 0xc9, 0x19, 0x04, 0x62, 0x1a, 0x35, 0x31, 0x72, 0xb1, 0x43, 0x75, 0x0a,
	0xd9, 0x70, 0xb1, 0xbb, 0xa4, 0xe6, 0x38, 0xe7, 0xe7, 0xe5, 0x09, 0x89, 0xeb, 0x41, 0xdd, 0xa5,
	0x87, 0xea, 0x28, 0x29, 0x09, 0x4c, 0x09, 0xa8, 0x7d, 0x96, 0x5c, 0x2c, 0x01, 0xa5, 0xc5, 0x19,
	0x64, 0x68, 0x75, 0xe2, 0x89, 0xe2, 0xd2, 0xd3, 0xb7, 0x86, 0xca, 0x26, 0xb1, 0x81, 0x43, 0xc6,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x52, 0x85, 0xdf, 0x2a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayClient interface {
	DelConn(ctx context.Context, in *GatewayRequest, opts ...grpc.CallOption) (*GatewayResponse, error)
	Push(ctx context.Context, in *GatewayRequest, opts ...grpc.CallOption) (*GatewayResponse, error)
}

type gatewayClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClient(cc *grpc.ClientConn) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) DelConn(ctx context.Context, in *GatewayRequest, opts ...grpc.CallOption) (*GatewayResponse, error) {
	out := new(GatewayResponse)
	err := c.cc.Invoke(ctx, "/service.Gateway/DelConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Push(ctx context.Context, in *GatewayRequest, opts ...grpc.CallOption) (*GatewayResponse, error) {
	out := new(GatewayResponse)
	err := c.cc.Invoke(ctx, "/service.Gateway/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
type GatewayServer interface {
	DelConn(context.Context, *GatewayRequest) (*GatewayResponse, error)
	Push(context.Context, *GatewayRequest) (*GatewayResponse, error)
}

// UnimplementedGatewayServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (*UnimplementedGatewayServer) DelConn(ctx context.Context, req *GatewayRequest) (*GatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelConn not implemented")
}
func (*UnimplementedGatewayServer) Push(ctx context.Context, req *GatewayRequest) (*GatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_DelConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DelConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Gateway/DelConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DelConn(ctx, req.(*GatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Gateway/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Push(ctx, req.(*GatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelConn",
			Handler:    _Gateway_DelConn_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Gateway_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}
